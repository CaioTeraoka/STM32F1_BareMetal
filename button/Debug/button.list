
button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000268  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000398  080003a0  000013a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000398  08000398  000013a0  2**0
                  CONTENTS
  4 .ARM          00000000  08000398  08000398  000013a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000398  080003a0  000013a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000398  08000398  00001398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800039c  0800039c  0000139c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003a0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003a0  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000295  00000000  00000000  000013c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000122  00000000  00000000  0000165e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000060  00000000  00000000  00001780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000003f  00000000  00000000  000017e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fe86  00000000  00000000  0000181f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000690  00000000  00000000  000116a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053da1  00000000  00000000  00011d35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00065ad6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c0  00000000  00000000  00065b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00065bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000380 	.word	0x08000380

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000380 	.word	0x08000380

08000170 <main>:
void GPIO_init(void);
void RCC_init(void);
void delay_ms(int time);

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	RCC_init();
 8000174:	f000 f81e 	bl	80001b4 <RCC_init>
	GPIO_init();
 8000178:	f000 f85c 	bl	8000234 <GPIO_init>
    /* Loop forever */
	for(;;){
		if(GPIOB->IDR & GPIO_IDR_IDR9){
 800017c:	4b0b      	ldr	r3, [pc, #44]	@ (80001ac <main+0x3c>)
 800017e:	689b      	ldr	r3, [r3, #8]
 8000180:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000184:	2b00      	cmp	r3, #0
 8000186:	d009      	beq.n	800019c <main+0x2c>
		GPIOC->BSRR |= GPIO_BSRR_BR13; //ligar led
 8000188:	4b09      	ldr	r3, [pc, #36]	@ (80001b0 <main+0x40>)
 800018a:	691b      	ldr	r3, [r3, #16]
 800018c:	4a08      	ldr	r2, [pc, #32]	@ (80001b0 <main+0x40>)
 800018e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000192:	6113      	str	r3, [r2, #16]
		delay_ms(1000);
 8000194:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000198:	f000 f880 	bl	800029c <delay_ms>
		}
		GPIOC->BSRR |= GPIO_BSRR_BS13; //desligar led
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <main+0x40>)
 800019e:	691b      	ldr	r3, [r3, #16]
 80001a0:	4a03      	ldr	r2, [pc, #12]	@ (80001b0 <main+0x40>)
 80001a2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80001a6:	6113      	str	r3, [r2, #16]
		if(GPIOB->IDR & GPIO_IDR_IDR9){
 80001a8:	e7e8      	b.n	800017c <main+0xc>
 80001aa:	bf00      	nop
 80001ac:	40010c00 	.word	0x40010c00
 80001b0:	40011000 	.word	0x40011000

080001b4 <RCC_init>:
	}
}

void RCC_init(void){
 80001b4:	b480      	push	{r7}
 80001b6:	af00      	add	r7, sp, #0
	//Configurando o oscilador para 8MHz externo
	RCC->CR |= RCC_CR_HSEON;
 80001b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000230 <RCC_init+0x7c>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	4a1c      	ldr	r2, [pc, #112]	@ (8000230 <RCC_init+0x7c>)
 80001be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80001c2:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY)); //espera estabilizar
 80001c4:	bf00      	nop
 80001c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000230 <RCC_init+0x7c>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d0f9      	beq.n	80001c6 <RCC_init+0x12>
	RCC->CFGR = (RCC->CFGR & ~(RCC_CFGR_SW)); //remove as configurações anteriores
 80001d2:	4b17      	ldr	r3, [pc, #92]	@ (8000230 <RCC_init+0x7c>)
 80001d4:	685b      	ldr	r3, [r3, #4]
 80001d6:	4a16      	ldr	r2, [pc, #88]	@ (8000230 <RCC_init+0x7c>)
 80001d8:	f023 0303 	bic.w	r3, r3, #3
 80001dc:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_SW_HSE; //seta a fonte de clock como HSE
 80001de:	4b14      	ldr	r3, [pc, #80]	@ (8000230 <RCC_init+0x7c>)
 80001e0:	685b      	ldr	r3, [r3, #4]
 80001e2:	4a13      	ldr	r2, [pc, #76]	@ (8000230 <RCC_init+0x7c>)
 80001e4:	f043 0301 	orr.w	r3, r3, #1
 80001e8:	6053      	str	r3, [r2, #4]
	RCC->CFGR &= ~(RCC_CFGR_HPRE); //reseta as configurações do AHB prescaler
 80001ea:	4b11      	ldr	r3, [pc, #68]	@ (8000230 <RCC_init+0x7c>)
 80001ec:	685b      	ldr	r3, [r3, #4]
 80001ee:	4a10      	ldr	r2, [pc, #64]	@ (8000230 <RCC_init+0x7c>)
 80001f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80001f4:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1; //seta o AHB prescaler como 1
 80001f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000230 <RCC_init+0x7c>)
 80001f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000230 <RCC_init+0x7c>)
 80001fa:	685b      	ldr	r3, [r3, #4]
 80001fc:	6053      	str	r3, [r2, #4]
	RCC->CFGR &= ~(RCC_CFGR_PPRE1); //reseta as configurações do APB1 prescaler
 80001fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000230 <RCC_init+0x7c>)
 8000200:	685b      	ldr	r3, [r3, #4]
 8000202:	4a0b      	ldr	r2, [pc, #44]	@ (8000230 <RCC_init+0x7c>)
 8000204:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000208:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV1; //seta o APB1 prescaler como 1
 800020a:	4b09      	ldr	r3, [pc, #36]	@ (8000230 <RCC_init+0x7c>)
 800020c:	4a08      	ldr	r2, [pc, #32]	@ (8000230 <RCC_init+0x7c>)
 800020e:	685b      	ldr	r3, [r3, #4]
 8000210:	6053      	str	r3, [r2, #4]
	RCC->CFGR &= ~(RCC_CFGR_PPRE2); //reseta as configurações do APB2 prescaler
 8000212:	4b07      	ldr	r3, [pc, #28]	@ (8000230 <RCC_init+0x7c>)
 8000214:	685b      	ldr	r3, [r3, #4]
 8000216:	4a06      	ldr	r2, [pc, #24]	@ (8000230 <RCC_init+0x7c>)
 8000218:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800021c:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1; //seta o APB2 prescaler como 1
 800021e:	4b04      	ldr	r3, [pc, #16]	@ (8000230 <RCC_init+0x7c>)
 8000220:	4a03      	ldr	r2, [pc, #12]	@ (8000230 <RCC_init+0x7c>)
 8000222:	685b      	ldr	r3, [r3, #4]
 8000224:	6053      	str	r3, [r2, #4]
}
 8000226:	bf00      	nop
 8000228:	46bd      	mov	sp, r7
 800022a:	bc80      	pop	{r7}
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	40021000 	.word	0x40021000

08000234 <GPIO_init>:

void GPIO_init(void){
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
	//Configurando a Porta PC13
	RCC->APB2ENR |= 0x01 << 4; //Habilitar o GPIOC no RCC
 8000238:	4b15      	ldr	r3, [pc, #84]	@ (8000290 <GPIO_init+0x5c>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	4a14      	ldr	r2, [pc, #80]	@ (8000290 <GPIO_init+0x5c>)
 800023e:	f043 0310 	orr.w	r3, r3, #16
 8000242:	6193      	str	r3, [r2, #24]
	GPIOC->CRH |= 0x0 << 22; //Configura como General purpose output push-pull
 8000244:	4b13      	ldr	r3, [pc, #76]	@ (8000294 <GPIO_init+0x60>)
 8000246:	4a13      	ldr	r2, [pc, #76]	@ (8000294 <GPIO_init+0x60>)
 8000248:	685b      	ldr	r3, [r3, #4]
 800024a:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= 0x3 << 20; //Configura como Output mode, max speed 50 MHz.
 800024c:	4b11      	ldr	r3, [pc, #68]	@ (8000294 <GPIO_init+0x60>)
 800024e:	685b      	ldr	r3, [r3, #4]
 8000250:	4a10      	ldr	r2, [pc, #64]	@ (8000294 <GPIO_init+0x60>)
 8000252:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8000256:	6053      	str	r3, [r2, #4]
	//Configurando a Porta PB9
	RCC->APB2ENR |= 0x01 << 3; //Habilitar o GPIOB no RCC
 8000258:	4b0d      	ldr	r3, [pc, #52]	@ (8000290 <GPIO_init+0x5c>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	4a0c      	ldr	r2, [pc, #48]	@ (8000290 <GPIO_init+0x5c>)
 800025e:	f043 0308 	orr.w	r3, r3, #8
 8000262:	6193      	str	r3, [r2, #24]
	GPIOB->CRH &= ~GPIO_CRH_CNF9_1;
 8000264:	4b0c      	ldr	r3, [pc, #48]	@ (8000298 <GPIO_init+0x64>)
 8000266:	685b      	ldr	r3, [r3, #4]
 8000268:	4a0b      	ldr	r2, [pc, #44]	@ (8000298 <GPIO_init+0x64>)
 800026a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800026e:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= GPIO_CRH_CNF9_0; //Floating input (reset state)
 8000270:	4b09      	ldr	r3, [pc, #36]	@ (8000298 <GPIO_init+0x64>)
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	4a08      	ldr	r2, [pc, #32]	@ (8000298 <GPIO_init+0x64>)
 8000276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800027a:	6053      	str	r3, [r2, #4]
	GPIOB->CRH &= ~(GPIO_CRH_MODE9); //Input mode (reset state)
 800027c:	4b06      	ldr	r3, [pc, #24]	@ (8000298 <GPIO_init+0x64>)
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	4a05      	ldr	r2, [pc, #20]	@ (8000298 <GPIO_init+0x64>)
 8000282:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000286:	6053      	str	r3, [r2, #4]
}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	bc80      	pop	{r7}
 800028e:	4770      	bx	lr
 8000290:	40021000 	.word	0x40021000
 8000294:	40011000 	.word	0x40011000
 8000298:	40010c00 	.word	0x40010c00

0800029c <delay_ms>:

void delay_ms(int time){
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
	//Delay em milissegundos (1MHz -> 1us)
	uint32_t ticks = time*1000;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80002aa:	fb02 f303 	mul.w	r3, r2, r3
 80002ae:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD = ticks;
 80002b0:	4a0b      	ldr	r2, [pc, #44]	@ (80002e0 <delay_ms+0x44>)
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 80002b6:	4b0a      	ldr	r3, [pc, #40]	@ (80002e0 <delay_ms+0x44>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
 80002bc:	4b08      	ldr	r3, [pc, #32]	@ (80002e0 <delay_ms+0x44>)
 80002be:	2201      	movs	r2, #1
 80002c0:	601a      	str	r2, [r3, #0]
	while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk));
 80002c2:	bf00      	nop
 80002c4:	4b06      	ldr	r3, [pc, #24]	@ (80002e0 <delay_ms+0x44>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d0f9      	beq.n	80002c4 <delay_ms+0x28>
	SysTick->CTRL = 0;
 80002d0:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <delay_ms+0x44>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
}
 80002d6:	bf00      	nop
 80002d8:	3714      	adds	r7, #20
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	e000e010 	.word	0xe000e010

080002e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002e4:	480d      	ldr	r0, [pc, #52]	@ (800031c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002e8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002ec:	480c      	ldr	r0, [pc, #48]	@ (8000320 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ee:	490d      	ldr	r1, [pc, #52]	@ (8000324 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000328 <LoopForever+0xe>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f4:	e002      	b.n	80002fc <LoopCopyDataInit>

080002f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002fa:	3304      	adds	r3, #4

080002fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000300:	d3f9      	bcc.n	80002f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000302:	4a0a      	ldr	r2, [pc, #40]	@ (800032c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000304:	4c0a      	ldr	r4, [pc, #40]	@ (8000330 <LoopForever+0x16>)
  movs r3, #0
 8000306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000308:	e001      	b.n	800030e <LoopFillZerobss>

0800030a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800030a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800030c:	3204      	adds	r2, #4

0800030e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800030e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000310:	d3fb      	bcc.n	800030a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000312:	f000 f811 	bl	8000338 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000316:	f7ff ff2b 	bl	8000170 <main>

0800031a <LoopForever>:

LoopForever:
  b LoopForever
 800031a:	e7fe      	b.n	800031a <LoopForever>
  ldr   r0, =_estack
 800031c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000324:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000328:	080003a0 	.word	0x080003a0
  ldr r2, =_sbss
 800032c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000330:	2000001c 	.word	0x2000001c

08000334 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000334:	e7fe      	b.n	8000334 <ADC1_2_IRQHandler>
	...

08000338 <__libc_init_array>:
 8000338:	b570      	push	{r4, r5, r6, lr}
 800033a:	2600      	movs	r6, #0
 800033c:	4d0c      	ldr	r5, [pc, #48]	@ (8000370 <__libc_init_array+0x38>)
 800033e:	4c0d      	ldr	r4, [pc, #52]	@ (8000374 <__libc_init_array+0x3c>)
 8000340:	1b64      	subs	r4, r4, r5
 8000342:	10a4      	asrs	r4, r4, #2
 8000344:	42a6      	cmp	r6, r4
 8000346:	d109      	bne.n	800035c <__libc_init_array+0x24>
 8000348:	f000 f81a 	bl	8000380 <_init>
 800034c:	2600      	movs	r6, #0
 800034e:	4d0a      	ldr	r5, [pc, #40]	@ (8000378 <__libc_init_array+0x40>)
 8000350:	4c0a      	ldr	r4, [pc, #40]	@ (800037c <__libc_init_array+0x44>)
 8000352:	1b64      	subs	r4, r4, r5
 8000354:	10a4      	asrs	r4, r4, #2
 8000356:	42a6      	cmp	r6, r4
 8000358:	d105      	bne.n	8000366 <__libc_init_array+0x2e>
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000360:	4798      	blx	r3
 8000362:	3601      	adds	r6, #1
 8000364:	e7ee      	b.n	8000344 <__libc_init_array+0xc>
 8000366:	f855 3b04 	ldr.w	r3, [r5], #4
 800036a:	4798      	blx	r3
 800036c:	3601      	adds	r6, #1
 800036e:	e7f2      	b.n	8000356 <__libc_init_array+0x1e>
 8000370:	08000398 	.word	0x08000398
 8000374:	08000398 	.word	0x08000398
 8000378:	08000398 	.word	0x08000398
 800037c:	0800039c 	.word	0x0800039c

08000380 <_init>:
 8000380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000382:	bf00      	nop
 8000384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000386:	bc08      	pop	{r3}
 8000388:	469e      	mov	lr, r3
 800038a:	4770      	bx	lr

0800038c <_fini>:
 800038c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038e:	bf00      	nop
 8000390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000392:	bc08      	pop	{r3}
 8000394:	469e      	mov	lr, r3
 8000396:	4770      	bx	lr
